{"version":3,"file":"static/js/387.a87f7d96.chunk.js","mappings":"6SAEaA,EAAyB,mCAAG,WAAMC,GAAN,wFACjBC,EAAAA,EAAAA,IAAM,sCAAD,OACaD,EADb,6DADY,cACjCE,EADiC,yBAIhCA,EAAQC,MAJwB,2CAAH,sDAOzBC,EAAwB,mCAAG,WAAMJ,GAAN,wFAChBC,EAAAA,EAAAA,IAAM,sCAAD,OACaD,EADb,qEADW,cAChCE,EADgC,yBAK/BA,EAAQC,KAAKE,MALkB,2CAAH,sDAQxBC,EAA0B,mCAAG,WAAMN,GAAN,wFAClBC,EAAAA,EAAAA,IAAM,sCAAD,OACaD,EADb,4EADa,cAClCE,EADkC,yBAKjCA,EAAQC,KAAKI,SALoB,2CAAH,sDAQ1BC,EAAgB,mCAAG,qGACRP,EAAAA,EAAAA,IACpB,0FAF4B,cACxBC,EADwB,yBAKvBA,EAAQC,KAAKI,SALU,2CAAH,qDAQhBE,EAAsB,mCAAE,WAAOC,GAAP,wFACbT,EAAAA,EAAAA,IAAM,qGAAD,OAC4ES,EAD5E,gCADQ,cAC7BR,EAD6B,yBAK5BA,EAAQC,KAAKI,SALe,2CAAF,qD,kJC/BtBI,EAAcC,EAAAA,GAAAA,QAAH,0CAIXC,EAAWD,EAAAA,GAAAA,GAAH,gKASRE,EAAWF,EAAAA,GAAAA,GAAH,2EAKRG,EAAYH,EAAAA,GAAAA,IAAH,0DAKTI,EAAYJ,EAAAA,GAAAA,GAAH,0LAUTK,EAAWL,EAAAA,GAAAA,EAAH,gH,SCkBrB,EAxCa,WACX,OAAwBM,EAAAA,EAAAA,UAAS,CAAC,GAAlC,eAAOb,EAAP,KAAac,EAAb,KACQnB,GAAOoB,EAAAA,EAAAA,MAAPpB,GAUR,OARAqB,EAAAA,EAAAA,YAAU,WACR,KACEjB,EAAAA,EAAAA,IAAyBJ,GAAIsB,MAAK,SAAAC,GAAG,OAAIJ,EAAQI,EAAZ,GAGtC,CAFC,MAAOC,GACPC,QAAQC,IAAIF,EACb,CACF,GAAE,CAACxB,KAGF,UAACW,EAAD,YACE,SAACE,EAAD,UACGR,EAAKsB,OAAS,GACbtB,EAAKuB,KAAI,SAAAC,GAAK,OACZ,UAACf,EAAD,YACE,SAACC,EAAD,CACEe,IAAG,UACDD,EAAME,aAAN,yCACsCF,EAAME,cACxCC,GAENC,IAAG,eAAUJ,EAAMK,SAErB,SAAClB,EAAD,UAAYa,EAAMK,QAClB,SAACjB,EAAD,UAAWY,EAAMM,cAVJN,EAAMK,KADT,OAehB7B,EAAKsB,SACL,SAACV,EAAD,4EAMP,C","sources":["ServiceAPI.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const FetchMovieInformationById = async id => {\n  const respons = await axios(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=bb9be7856d820d280efdc8865f07d5b2&language=en-US`\n  );\n  return respons.data;\n};\n\nexport const FetchCastInformationById = async id => {\n  const respons = await axios(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=bb9be7856d820d280efdc8865f07d5b2&language=en-US`\n  );\n\n  return respons.data.cast;\n};\n\nexport const FetchReviewInformationById = async id => {\n  const respons = await axios(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=bb9be7856d820d280efdc8865f07d5b2&language=en-US&page=1`\n  );\n\n  return respons.data.results;\n};\n\nexport const fetchTrendMovies = async () => {\n  const respons = await axios(\n    'https://api.themoviedb.org/3/trending/all/day?api_key=bb9be7856d820d280efdc8865f07d5b2'\n  );\n\n  return respons.data.results;\n};\n\nexport const fetchSearchQueryMovies= async (searchParams) => {\n  const respons = await axios(\n    `https://api.themoviedb.org/3/search/movie?api_key=bb9be7856d820d280efdc8865f07d5b2&language=en-US&${searchParams}&page=1&include_adult=false`\n  );\n\n  return respons.data.results;\n};","import styled from 'styled-components';\n\nexport const CastSection = styled.section`\n  padding: 10px;\n`;\n\nexport const CastList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 200px);\n  gap: 16px;\n  padding: 10px;\n  margin: 0;\n  list-style: none;\n`;\n\nexport const CastItem = styled.li`\n  border: 1px solid black;\n  border-radius: 4px;\n`;\n\nexport const CastImage = styled.img`\n  width: 100%;\n  height: 300px;\n`;\n\nexport const CastTitle = styled.h2`\n  text-align: center;\n  margin: 0 0 10px 0;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 1.15;\n  text-transform: uppercase;\n`;\n\nexport const CastText = styled.p`\n  text-align: center;\n  font-style: normal;\n  font-size: 17px;\n  line-height: 1.33;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport imageDefaults from 'images/broken-img.jpg';\nimport { FetchCastInformationById } from 'ServiceAPI';\nimport {\n  CastSection,\n  CastList,\n  CastItem,\n  CastImage,\n  CastTitle,\n  CastText,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState({});\n  const { id } = useParams();\n\n  useEffect(() => {\n    try {\n      FetchCastInformationById(id).then(res => setCast(res));\n    } catch (error) {\n      console.log(error);\n    }\n  }, [id]);\n\n  return (\n    <CastSection>\n      <CastList>\n        {cast.length > 0 &&\n          cast.map(actor => (\n            <CastItem key={actor.name}>\n              <CastImage\n                src={`${\n                  actor.profile_path\n                    ? `https://image.tmdb.org/t/p/w400${actor.profile_path}`\n                    : imageDefaults\n                }`}\n                alt={`Foto ${actor.name}`}\n              />\n              <CastTitle>{actor.name}</CastTitle>\n              <CastText>{actor.character}</CastText>\n            </CastItem>\n          ))}\n      </CastList>\n      {!cast.length && (\n        <CastText>\n          We don't have any information about the cast of this movie.\n        </CastText>\n      )}\n    </CastSection>\n  );\n};\n\nexport default Cast;\n"],"names":["FetchMovieInformationById","id","axios","respons","data","FetchCastInformationById","cast","FetchReviewInformationById","results","fetchTrendMovies","fetchSearchQueryMovies","searchParams","CastSection","styled","CastList","CastItem","CastImage","CastTitle","CastText","useState","setCast","useParams","useEffect","then","res","error","console","log","length","map","actor","src","profile_path","imageDefaults","alt","name","character"],"sourceRoot":""}