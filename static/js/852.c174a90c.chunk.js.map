{"version":3,"file":"static/js/852.c174a90c.chunk.js","mappings":"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","sources":["ServiceAPI.js","components/MovieInformation/MovieInformation.styled.js","components/MovieInformation/MovieInformation.jsx","components/BackLink/BackLink.styled.js","components/BackLink/BackLink.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const FetchMovieInformationById = async id => {\n  const respons = await axios(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=bb9be7856d820d280efdc8865f07d5b2&language=en-US`\n  );\n  return respons.data;\n};\n\nexport const FetchCastInformationById = async id => {\n  const respons = await axios(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=bb9be7856d820d280efdc8865f07d5b2&language=en-US`\n  );\n\n  return respons.data.cast;\n};\n\nexport const FetchReviewInformationById = async id => {\n  const respons = await axios(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=bb9be7856d820d280efdc8865f07d5b2&language=en-US&page=1`\n  );\n\n  return respons.data.results;\n};\n\nexport const fetchTrendMovies = async () => {\n  const respons = await axios(\n    'https://api.themoviedb.org/3/trending/all/day?api_key=bb9be7856d820d280efdc8865f07d5b2'\n  );\n\n  return respons.data.results;\n};\n\nexport const fetchSearchQueryMovies= async (searchParams) => {\n  const respons = await axios(\n    `https://api.themoviedb.org/3/search/movie?api_key=bb9be7856d820d280efdc8865f07d5b2&language=en-US&${searchParams}&page=1&include_adult=false`\n  );\n\n  return respons.data.results;\n};","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const MovieInformationSection = styled.section`\n  display: flex;\n  padding: 10px;\n  border-bottom: 1px solid black;\n`;\n\nexport const MovieInformationImage = styled.img`\n  width: 250px;\n  height: 375px;\n`;\n\nexport const MovieInformationWrapper = styled.div`\n  margin-left: 20px;\n  padding: 5px;\n`;\n\nexport const MovieInformationTitle = styled.h1`\n  margin: 0 0 10px 0;\n  font-style: normal;\n  font-weight: 700;\n  font-size: 25px;\n  line-height: 1.15;\n  text-transform: uppercase;\n`;\n\nexport const MovieInformationText = styled.p`\n  margin: 0 0 10px 0;\n  font-style: normal;\n  font-size: 17px;\n  line-height: 1.33;\n`;\n\nexport const MovieInformationSectionTitle = styled.h2`\n  margin: 0 0 10px 0;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 25px;\n  line-height: 1.15;\n  text-transform: uppercase;\n`;\n\nexport const MovieInformationComponentsList = styled.ul`\n  padding: 10px;\n  margin: 0;\n`;\n\nexport const MovieInformationComponentsItem = styled.li`\n  margin: 0 0 5px 0;\n`;\n\nexport const MovieInformationComponentsLink = styled(Link)`\n  font-style: normal;\n  font-size: 17px;\n  line-height: 1.33;\n  color: black;\n  text-decoration: none;\n\n  &:hover {\n    color: green;\n  }\n`;\n\nexport const MovieInformationComponentsWrapper = styled.div`\n  padding: 10px;\n  border-bottom: 1px solid black;\n`;\n\nexport const MovieInformationGenresWrapper = styled.ul`\n  padding: 10px;\n`;\n","import imageDefaults from 'images/broken-img.jpg';\nimport {\n  MovieInformationSection,\n  MovieInformationImage,\n  MovieInformationWrapper,\n  MovieInformationTitle,\n  MovieInformationText,\n  MovieInformationSectionTitle,\n  MovieInformationComponentsLink,\n  MovieInformationComponentsList,\n  MovieInformationComponentsItem,\n  MovieInformationComponentsWrapper,\n  MovieInformationGenresWrapper,\n} from './MovieInformation.styled';\n\nexport const MovieInformation = ({\n  poster_path,\n  title,\n  name,\n  vote_average,\n  overview,\n  genres,\n  backLink,\n}) => {\n  return (\n    <main>\n      <MovieInformationSection>\n        <MovieInformationImage\n          src={`${\n            poster_path\n              ? `https://image.tmdb.org/t/p/w400${poster_path}`\n              : imageDefaults\n          }`}\n          alt={`Foto ${title ? title : name}`}\n        />\n        <MovieInformationWrapper>\n          <MovieInformationTitle>{title ? title : name}</MovieInformationTitle>\n          <MovieInformationText>\n            User Score: {((vote_average / 10) * 100).toFixed(0)}%\n          </MovieInformationText>\n          <MovieInformationSectionTitle>Overview</MovieInformationSectionTitle>\n          <MovieInformationText>{overview}</MovieInformationText>\n          <MovieInformationSectionTitle>Genres</MovieInformationSectionTitle>\n          <MovieInformationGenresWrapper>\n            {genres &&\n              genres.map(genre => (\n                <li key={genre.id}>\n                  <MovieInformationText>{genre.name}</MovieInformationText>\n                </li>\n              ))}\n          </MovieInformationGenresWrapper>\n        </MovieInformationWrapper>\n      </MovieInformationSection>\n\n      <MovieInformationComponentsWrapper>\n        <MovieInformationText>Additional information</MovieInformationText>\n\n        <MovieInformationComponentsList>\n          <MovieInformationComponentsItem>\n            <MovieInformationComponentsLink\n              to=\"cast\"\n              state={{ from: backLink }}\n            >\n              Cast\n            </MovieInformationComponentsLink>\n          </MovieInformationComponentsItem>\n          <MovieInformationComponentsItem>\n            <MovieInformationComponentsLink\n              to=\"reviews\"\n              state={{ from: backLink }}\n            >\n              Reviews\n            </MovieInformationComponentsLink>\n          </MovieInformationComponentsItem>\n        </MovieInformationComponentsList>\n      </MovieInformationComponentsWrapper>\n    </main>\n  );\n};\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n  :hover {\n    color: green;\n  }\n`;\n\n","import { HiArrowLeft } from 'react-icons/hi';\nimport {StyledLink} from './BackLink.styled'\n\nexport const BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"24\" />\n      {children}\n    </StyledLink>\n  );\n};\n","import { useState, useEffect, Suspense } from 'react';\nimport { useParams, useLocation, Outlet } from 'react-router-dom';\nimport { MovieInformation } from 'components/MovieInformation/MovieInformation';\nimport { BackLink } from 'components/BackLink/BackLink';\nimport { FetchMovieInformationById } from 'ServiceAPI';\n\nconst MoviesDetails = () => {\n  const [movieInformation, setMovieInformation] = useState({});\n  const { id } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n  const { poster_path, title, name, vote_average, overview, genres } =\n    movieInformation;\n\n  useEffect(() => {\n    try {\n      FetchMovieInformationById(id).then(res => setMovieInformation(res));\n    } catch (error) {\n      console.log(error);\n    }\n  }, [id]);\n\n  return (\n    <main>\n      <BackLink to={backLinkHref}>Go back</BackLink>\n      <MovieInformation\n        poster_path={poster_path}\n        title={title}\n        name={name}\n        vote_average={vote_average}\n        overview={overview}\n        genres={genres}\n        backLink={backLinkHref}\n      ></MovieInformation>\n      <Suspense fallback={<div>Loading subpage...</div>}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MoviesDetails;\n"],"names":["FetchMovieInformationById","id","axios","respons","data","FetchCastInformationById","cast","FetchReviewInformationById","results","fetchTrendMovies","fetchSearchQueryMovies","searchParams","MovieInformationSection","styled","MovieInformationImage","MovieInformationWrapper","MovieInformationTitle","MovieInformationText","MovieInformationSectionTitle","MovieInformationComponentsList","MovieInformationComponentsItem","MovieInformationComponentsLink","Link","MovieInformationComponentsWrapper","MovieInformationGenresWrapper","MovieInformation","poster_path","title","name","vote_average","overview","genres","backLink","src","imageDefaults","alt","toFixed","map","genre","to","state","from","StyledLink","BackLink","children","size","useState","movieInformation","setMovieInformation","useParams","backLinkHref","useLocation","useEffect","then","res","error","console","log","Suspense","fallback"],"sourceRoot":""}